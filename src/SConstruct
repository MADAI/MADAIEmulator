import os
# a neater makefile

# pull in the libEmu file too and run it
SConscript(['libEmu/SConstruct'])
libs=Split('gsl gslcblas m pthread Emu LBFGS')
libs2 = Split('gsl gslcblas m pthread')
cflags='-O0 -Wall -pg -g  -pedantic -Wextra -std=gnu99 -I. -I.. -I./libEmu -I./multi'

env = Environment(CCFLAGS = cflags, CPPPATH=['./libEmu'], LIBPATH=['./libEmu'])
env.Append( LINKFLAGS = Split ('-z origin'))
env.Append( RPATH = env.Literal(os.path.join('\\$$ORIGIN', 'libEmu')))




# make the emulator program
main_src = Split('main.c ioread.c persist.c useful.c')
env.Program('emulator', main_src, LIBS=libs)

# make the rbind lib
#rbind_src = Split('rbind.c multi/multifit.c multi/multihelper.c useful.c')
#env.SharedLibrary('libRbind', rbind_src, LIBS=libs, LIBPATH=['./libEmu'])

# coverage_src = Split('coverage.c ioread.c useful.c')
# env.Program('coverage', coverage_src, LIBS=libs)

likely_src = Split('likelyhoody.c ioread.c useful.c')
env.Program('likelyhood', likely_src, LIBS=libs)
