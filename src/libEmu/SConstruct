import os

cc = 'clang'
# set some options to use
cflags = '-O -pg -c -O2 -Wextra -pedantic -std=c99'
# debug flags
debug = '-O -c -O0 -g -pg'
# use the matern covariance function
#usematern = ' -DMATERN'
fortran = '-O2 -pg -Wall'


env_prod = Environment(CCFLAGS = debug )
env_shared = Environment(CCFLAGS = debug)
env_lbfgs = Environment(CCFLAGS = fortran, CC='gfortran')

src_lbfgs = Split('routines.f')




# source files to make the lib
src_files = Split('estimator.c regression.c emulator.c maximise.c maxbfgs.c bfgs.c maxlbfgs.c lbfgs.c estimate_threaded.c')

libsbfgsBIN=Split('gsl gslcblas m pthread gfortran LBFGS')
libs=Split('gsl gslcblas m pthread')



# make the libEmu library 
#env_prod.Library('libEmu', src_files, LIBS=libsbfgs)
# make the shared one
# do the rpath joke again
# env_shared.Append(LINKFLAGS = Split('-z origin'))
# env_shared.Append( RPATH = env_shared.Literal(os.path.join('\\$$ORIGIN', 'lbfgs')))
env_shared.SharedLibrary('libEmu', src_files, LIBS=libs)
env_lbfgs.SharedLibrary('libLBFGS', src_lbfgs)
#env_prod.Program('lbfgs-test', 'lbfgs.c', LIBS=libsbfgsBIN, CCFLAGS = debug + " -DEXECUTE")
